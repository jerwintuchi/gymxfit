// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  clerkId        String          @unique // Maps to Clerk's user ID
  name           String
  role           Role            @default(USER)
  membershipId   String?         @unique
  attendanceLogs AttendanceLog[]
  membershipExpiry DateTime?   // for membership expiration
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Admin {
  id        String   @id @default(cuid())
  clerkId   String   @unique // Maps to Clerk's user ID
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AttendanceLog {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  nonMember NonMember? @relation(fields: [nonMemberid], references: [id])
  nonMemberid String? //foreign key
  checkIn   DateTime
  checkOut  DateTime?
  createdAt DateTime @default(now())
}

model NonMember {
  id            String         @id @default(cuid())
  name          String
  temporaryId   String         @unique
  attendanceLogs AttendanceLog[]
  createdAt     DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  type      NotificationType
  sentTo    String? // Could be linked to Admin or User ID
  sentAt    DateTime @default(now())
}

enum Role {
  ADMIN
  USER
  MANAGER
}

enum NotificationType {
  HIGH_ATTENDANCE
  LOW_ATTENDANCE
  MEMBER_REMINDER
}